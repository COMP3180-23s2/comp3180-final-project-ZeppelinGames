// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct Voxel {
    float3 position;
	bool outDirs[6];
};

float3 dirs[] = {
	float3(0,1,0),
	float3(0,-1,0),
	float3(1,0,0),
	float3(-1,0,0),
	float3(0,0,1),
	float3(0,0,-1),
};

bool CompareF3(in float3 a, in float3 b) {
	return a.x == b.x && a.y == b.y && a.z == b.z;
}

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWStructuredBuffer<Voxel> voxs;

[numthreads(10, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    Voxel vox = voxs[id.x];

	for (uint i = 0; i < voxs.Length; i++)
	{
		Voxel compVox = voxs[i];
		for (uint j = 0; j < dirs.Length; j++)
		{
			if (CompareF3(vox.position + dirs[j], compVox.position)) {
				vox.outDirs[j] = true;
			}
		}
	}

	voxs[id.x] = vox;
}
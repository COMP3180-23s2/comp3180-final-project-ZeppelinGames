// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#define TEXTURE_WIDTH 32 
#define TEXTURE_HEIGHT 32

SamplerState texsampler;

Texture2DArray<float4> InputTextures : register(t0);

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    int2 texCoord = int2(id.x, id.y);

    float4 centerColor = InputTextures.Sample(texsampler, id);
    float4 neighborColor;

    // Define the 3D offsets for neighbors
    int3 neighborOffsets[6] = {
        int3(1,0,0), int3(-1,0,0),
        int3(0,1,0), int3(0,-1,0),
        int3(0,0,1), int3(0,0,-1)
    };

    bool dir[6] = {
        false,false,false,false,false,false
    };

    // Check neighbours
    for (int i = 0; i < 6; i++)
    {
        int3 neighborCoord = id + neighborOffsets[i];
        neighborColor = InputTextures.Sample(texsampler, neighborCoord);
        if(neighborColor.w > 0.5) {
            dir[i] = true;

            
        }
    }
}
